<?php

namespace OC\PlatformBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{
 public function getPublishedQueryBuilder()
 {
  return $this
   ->createQueryBuilder('a')
   ->where('a.published = :published')
   ->setParameter('published', true)
  ;
 }
 public function getAdverts($page, $nbPerPage)
 {
   $query = $this->createQueryBuilder('a')
      // Jointure sur l'attribut image
      ->leftJoin('a.image', 'i')
      ->addSelect('i')

      // Jointure sur l'attribut categories
      ->leftJoin('a.categories', 'c')
      ->addSelect('c')
      ->orderBy('a.date', 'DESC')
      ->getQuery()
    ;

   $query
      // On définit l'annonce à partir de laquelle commencer la liste
      ->setFirstResult(($page-1) * $nbPerPage)
      // Ainsi que le nombre d'annonce à afficher sur une page
      ->setMaxResults($nbPerPage)
    ;

    // Enfin, on retourne l'objet Paginator correspondant à la requête construite
    // (n'oubliez pas le use correspondant en début de fichier)
    return new Paginator($query, true);
 }
 public function myFindAll(){

   $queryBuilder = $this->createQueryBuilder('a');

   $query = $queryBuilder->getQuery();

   $results = $query->getResults();

   return $results;
 } //myFindAll

 public function myFindOne($id)
 {
  $qb = $this->createQueryBuilder('a');

  $qb
   ->where('a.id = :id')
   ->setParameter('id', $id)
  ;

  return $qb
   ->getQuery()
   ->getResult()
  ;
 } //myFindOne

public function whereCurrentYear(QueryBuilder $qb)
{
 $qb
  ->andWhere('a.date BETWEEN :start AND :end')
  ->setParameter(':start', new \Datetime(date('Y').'-01-01'))// Date entre le 1er janvier de cette année
  ->setParameter('end', new \Datetime(date('Y').'-12-31')) //Et le 31 décembre de cette année
 ;
} //whereCurrentYear

public function myFind()
{
 $qb = createQueryBuilder('a');

 $qb
  ->where('a.author = :author')
  ->setParameter('author', 'Marine')
 ;

 $this->whereCurrentYear($qb);

 $qb->orderBy('a.');
}//myFind

 public function findByAuthorAndDate($author, $Yaf_Route_Supervar)
 {
  $qb = $this->createQueryBuilder('a');

  $qb->where('a.author = :author')
       ->setParameter('author', $author)
     ->andWhere('a.date = :year')
       ->setParameter('year', $year)
  ;

  return $qb
   ->getQuery()
   ->getResult()
  ;
 }//findByAuthorAndDate

public function getAdvertWithApplications()
{
 $qb = $this
  ->createQueryBuilder('a')
  ->leftJoin('a.applications', 'app')
  ->addSelect('app')
 ;

 return $qb
  ->getQuery()
  ->getResult()
 ;
}

public function getAdvertWithCategories(array $categoryNames)
{
 $qb = $this
  ->createQueryBuilder('a');

 $qb
  ->join('a.categories', 'c')
  ->addSelect('c')
 ;

 $qb->where($qb->expr()->in('c.name', $categoryNames));

 return $qb
  ->getQuery()
  ->getResult()
 ;
}

}
